(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{329:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return d}));var a=n(3),s=n(7),r=(n(0),n(358)),l=n(361),i=n(362),o={title:"Save social distancing rulesets",slug:"/api-charts-save-social-distancing-rulesets",hidden:!1,createdAt:"2020-06-19T07:17:22.286Z",updatedAt:"2021-02-23T13:15:04.769Z"},c={unversionedId:"REST API/api-charts/api-charts-save-social-distancing-rulesets",id:"REST API/api-charts/api-charts-save-social-distancing-rulesets",isDocsHomePage:!1,title:"Save social distancing rulesets",description:"A social distancing ruleset determines which seats should not be selectable for a ticket buyer. Something like: 'families of up to 4 people can sit next to each other, but there should be a gap of 2 seats to the left and to the right of them'.",source:"@site/docs/REST API/api-charts/api-charts-save-social-distancing-rulesets.md",slug:"/api-charts-save-social-distancing-rulesets",permalink:"/docs/api-charts-save-social-distancing-rulesets",version:"current",sidebar:"docs",previous:{title:"Copy draft version",permalink:"/docs/api-charts-copy-draft-version"},next:{title:"List tags of all charts",permalink:"/docs/api-list-tags-of-all-charts"}},u=[],b={toc:u};function d(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"A social distancing ruleset determines which seats should not be selectable for a ticket buyer. Something like: 'families of up to 4 people can sit next to each other, but there should be a gap of 2 seats to the left and to the right of them'."),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Applying a ruleset to an event")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"This article describes the call to add rulesets to a chart. To apply one of those rulesets to an event, use the ",Object(r.b)("a",{parentName:"p",href:"doc:api-create-an-event"},"create event")," or",Object(r.b)("a",{parentName:"p",href:"doc:api-update-an-event"},"update event")," call."))),Object(r.b)(l.a,{defaultValue:"shell",values:[{label:"Text",value:"shell"},{label:"PHP",value:"php"},{label:"C#",value:"csharp"},{label:"Java",value:"java"},{label:"Python",value:"python"},{label:"Ruby",value:"ruby"},{label:"Javascript",value:"javascript"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"shell",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"POST https://api.seatsio.net/charts/{chartKey}/social-distancing-rulesets\n"))),Object(r.b)(i.a,{value:"php",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-php"},'$ruleset1 = SocialDistancingRuleset::ruleBased("My first ruleset")\n  ->setIndex(0)\n  ->setNumberOfDisabledSeatsToTheSides(1)\n  ->setDisableSeatsInFrontAndBehind(true)\n  ->setDisableDiagonalSeatsInFrontAndBehind(true)\n  ->setNumberOfDisabledAisleSeats(2)\n  ->setMaxGroupSize(1)\n  ->setMaxOccupancyAbsolute(10)\n  ->setOneGroupPerTable(true)\n  ->setDisabledSeats(["A-1"])\n  ->setEnabledSeats(["A-2"])\n  ->build();\n\n$ruleset2 = SocialDistancingRuleset::fixed("My second ruleset")\n  ->setIndex(1)\n  ->setDisabledSeats(["A-1"])\n  ->build();\n\n$rulesets = ["ruleset1" => $ruleset1, "ruleset2" => $ruleset2];\n\n$seatsioClient->charts->saveSocialDistancingRulesets($chartKey, $rulesets);\n'))),Object(r.b)(i.a,{value:"csharp",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csharp"},'var ruleset1 = SocialDistancingRuleset.RuleBased("My first ruleset")\n  .WithIndex(0)\n  .WithNumberOfDisabledSeatsToTheSides(1)\n  .WithDisableSeatsInFrontAndBehind(true)\n  .WithDisableDiagonalSeatsInFrontAndBehind(true)\n  .WithNumberOfDisabledAisleSeats(2)\n  .WithMaxGroupSize(1)\n  .WithMaxOccupancyAbsolute(10)\n  .WithOneGroupPerTable(true)\n  .WithDisabledSeats(new List<string> {"A-1"})\n  .WithEnabledSeats(new List<string> {"A-2"})\n  .Build();\n\nvar ruleset2 = SocialDistancingRuleset.Fixed("My second ruleset")\n  .WithIndex(1)\n  .WithDisabledSeats(new List<string> {"A-1"})\n  .Build();\n\nvar rulesets = new Dictionary<string, SocialDistancingRuleset>\n{\n  {"ruleset1", ruleset1},\n  {"ruleset2", ruleset2}\n};\n\nClient.Charts.SaveSocialDistancingRulesets(chartKey, rulesets);\n'))),Object(r.b)(i.a,{value:"java",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-java"},'SocialDistancingRuleset ruleset1 = SocialDistancingRuleset.ruleBased("My first ruleset")\n  .withIndex(0)\n  .withNumberOfDisabledSeatsToTheSides(1)\n  .withDisableSeatsInFrontAndBehind(true)\n  .withDisableDiagonalSeatsInFrontAndBehind(true)\n  .withNumberOfDisabledAisleSeats(2)\n  .withMaxGroupSize(1)\n  .withMaxOccupancyAbsolute(10)\n  .withOneGroupPerTable(true)\n  .withDisabledSeats(newHashSet("A-1"))\n  .withEnabledSeats(newHashSet("A-2"))\n  .build();\n\nSocialDistancingRuleset ruleset2 = SocialDistancingRuleset.fixed("My second ruleset")\n  .withIndex(1)\n  .withDisabledSeats(newHashSet("A-1"))\n  .build();\n\nMap<String, SocialDistancingRuleset> rulesets = ImmutableMap.of(\n  "ruleset1", ruleset1,\n  "ruleset2", ruleset2\n);\n\nclient.charts.saveSocialDistancingRulesets(chart.key, rulesets);\n'))),Object(r.b)(i.a,{value:"python",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"rulesets = {\n  'ruleset1': SocialDistancingRuleset(\n    name='My first ruleset',\n    number_of_disabled_seats_to_the_sides=1,\n    disable_seats_in_front_and_behind=True,\n    disable_diagonal_seats_in_front_and_behind=True,\n    number_of_disabled_aisle_seats=2,\n    max_group_size=1,\n    max_occupancy_absolute=10,\n    max_occupancy_percentage=0,\n    one_group_per_table=True,\n    fixed_group_layout=False,\n    disabled_seats=[\"A-1\"],\n    enabled_seats=[\"A-2\"],\n    index=4\n  ),\n  'ruleset2': SocialDistancingRuleset(name='My second ruleset'),\n}\n\nclient.charts.save_social_distancing_rulesets(chart.key, rulesets)\n"))),Object(r.b)(i.a,{value:"ruby",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ruby"},'rulesets = {\n  "ruleset1" => {\n    "name" => "My first ruleset",\n    "numberOfDisabledSeatsToTheSides" => 1,\n    "disableSeatsInFrontAndBehind" => true,\n    "disableDiagonalSeatsInFrontAndBehind" => true,\n    "numberOfDisabledAisleSeats" => 2,\n    "maxGroupSize" => 1,\n    "maxOccupancyAbsolute" => 10,\n    "maxOccupancyPercentage" => 0,\n    "fixedGroupLayout" => false,\n    "disabledSeats" => ["A-1"],\n    "enabledSeats" => ["A-2"],\n    "index" => 4,\n  },\n  "ruleset2" => {\n    "name" => "My second ruleset"\n  }\n}\n\nclient.charts.save_social_distancing_rulesets(chart.key, rulesets)\n'))),Object(r.b)(i.a,{value:"javascript",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"const ruleset1 = SocialDistancingRuleset.ruleBased('My first ruleset')\n  .setIndex(0)\n  .setNumberOfDisabledSeatsToTheSides(1)\n  .setDisableSeatsInFrontAndBehind(true)\n  .setDisableDiagonalSeatsInFrontAndBehind(true)\n  .setNumberOfDisabledAisleSeats(2)\n  .setMaxGroupSize(1)\n  .setMaxOccupancyPercentage(10)\n  .setOneGroupPerTable(true)\n  .setDisabledSeats(['A-1'])\n  .setEnabledSeats(['A-2'])\n  .build()\n\nconst ruleset2 = SocialDistancingRuleset.fixed('My second ruleset')\n  .setIndex(1)\n  .setDisabledSeats(['A-1'])\n  .build()\n\nclient.charts.saveSocialDistancingRulesets(chart.key, { ruleset1: ruleset1, ruleset2: ruleset2 })\n")))),Object(r.b)("p",null,"Returns 204 - No Content "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "socialDistancingRulesets": {\n    "ruleset1": {\n      "name": "My first ruleset",\n      "index": 0,\n      "numberOfDisabledSeatsToTheSides": 2,\n      "disableSeatsInFrontAndBehind": true,\n      "disableDiagonalSeatsInFrontAndBehind": true,\n      "numberOfDisabledAisleSeats": 0,\n      "maxGroupSize": 4,\n      "enabledSeats": [],\n      "disabledSeats": ["A-1", "A-2", "A-3", "A-4", "A-5"],\n      "maxOccupancyAbsolute": 150, // or: "maxOccupancyPercentage": 30,\n      "oneGroupPerTable": true\n    },\n    "ruleset2": {\n      "fixedGroupLayout": true,\n      "disabledSeats": ["A-1", "A-2", "A-3", "A-4", "A-5"]\n    }\n  }\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"name"),": required. The name of the ruleset. Used to refer to it internally."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"index"),": optional. Number that determines the order of the rulesets when displayed in a list. Lower indexes go to the top."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"numberOfDisabledSeatsToTheSides"),": optional. The number of seats to disable to the left and right of a selected seat."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"disableSeatsInFrontAndBehind"),": optional. The number of seats to disable to the left and right of a selected seat."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"disableDiagonalSeatsInFrontAndBehind"),": optional. Set to true to not only disable seats directly in front of and behind a seat, but also diagonally. Can only be enabled if ",Object(r.b)("inlineCode",{parentName:"li"},"disableSeatsInFrontAndBehind")," is true.\nIf you don't pass in ",Object(r.b)("inlineCode",{parentName:"li"},"disableDiagonalSeatsInFrontAndBehind"),", and ",Object(r.b)("inlineCode",{parentName:"li"},"numberOfDisabledSeatsToTheSides")," is bigger than 1, ",Object(r.b)("inlineCode",{parentName:"li"},"disableDiagonalSeatsInFrontAndBehind")," is set to ",Object(r.b)("inlineCode",{parentName:"li"},"true")," automatically."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"numberOfDisabledAisleSeats"),": optional. Disables seats on each end of a row."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"maxGroupSize"),": optional. How many people can sit next to each other. Set to 0 for no limit."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"enabledSeats"),": optional. Array of seats that should be selectable by ticket buyers, even if the rules say otherwise. Useful to mark some seats as non-aisle seats when the aisle seats rule is enabled."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"disabledSeats"),": optional. Array of seats that should not be selectable by ticket buyers. Could be used to mark every other row as disabled."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"maxOccupancyAbsolute"),": optional. The maximum number of people that are allowed for this event."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"maxOccupancyPercentage"),": optional. Integer between 1 and 100. The maximum number of people that are allowed for this event, expressed as a percentage of the total capacity of the venue."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"oneGroupPerTable"),": optional boolean. Defaults to false. When true, table seats that are not booked are left empty. Only one group of people can sit at a table."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"fixedGroupLayout"),": boolean. Defaults to false. Set to true to manually indicate which seats should be booked as a group (by passing in ",Object(r.b)("inlineCode",{parentName:"li"},"disabledSeats"),"). When the ticket buyer clicks on a seat, all selectable seats next to that seat become selected as well.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},'curl https://api.seatsio.net/charts/{chartKey}/social-distancing-rulesets \\\n-u aSecretKey: -X POST -H \'Content-Type: application/json\' -d \'{\n  "socialDistancingRulesets": {\n    "ruleset1": {\n      "name": "My first ruleset",\n      "index": 0,\n            "numberOfDisabledSeatsToTheSides": 2,\n      "disableSeatsInFrontAndBehind": true,\n      "disableDiagonalSeatsInFrontAndBehind": true,\n      "numberOfDisabledAisleSeats": 0,\n      "maxGroupSize": 4,\n      "enabledSeats": [],\n      "disabledSeats": ["A-1", "A-2", "A-3", "A-4", "A-5"],\n      "maxOccupancyAbsolute": 150,\n      "oneGroupPerTable": true\n    }\n  }\n}\'\n')))}d.isMDXComponent=!0},357:function(e,t,n){"use strict";function a(e){var t,n,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(s&&(s+=" "),s+=n);else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}t.a=function(){for(var e,t,n=0,s="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(s&&(s+=" "),s+=t);return s}},358:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),s=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=s.a.createContext({}),u=function(e){var t=s.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=u(e.components);return s.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},p=s.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),b=u(n),p=a,m=b["".concat(l,".").concat(p)]||b[p]||d[p]||r;return n?s.a.createElement(m,i(i({ref:t},c),{},{components:n})):s.a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return s.a.createElement.apply(null,l)}return s.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},359:function(e,t,n){"use strict";var a=n(0),s=n(360);t.a=function(){var e=Object(a.useContext)(s.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},360:function(e,t,n){"use strict";var a=n(0),s=Object(a.createContext)(void 0);t.a=s},361:function(e,t,n){"use strict";var a=n(0),s=n.n(a),r=n(359),l=n(357),i=n(54),o=n.n(i),c=37,u=39;t.a=function(e){var t=e.lazy,n=e.block,i=e.defaultValue,b=e.values,d=e.groupId,p=e.className,m=Object(r.a)(),h=m.tabGroupChoices,f=m.setTabGroupChoices,O=Object(a.useState)(i),g=O[0],y=O[1],v=a.Children.toArray(e.children);if(null!=d){var S=h[d];null!=S&&S!==g&&b.some((function(e){return e.value===S}))&&y(S)}var j=function(e){y(e),null!=d&&f(d,e)},N=[];return s.a.createElement("div",null,s.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":n},p)},b.map((function(e){var t=e.value,n=e.label;return s.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===t,className:Object(l.a)("tabs__item",o.a.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case u:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case c:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(N,e.target,e)},onFocus:function(){return j(t)},onClick:function(){j(t)}},n)}))),t?Object(a.cloneElement)(v.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):s.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},362:function(e,t,n){"use strict";var a=n(0),s=n.n(a);t.a=function(e){var t=e.children,n=e.hidden,a=e.className;return s.a.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}}}]);